// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GhostDrawProtobuf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GhostDrawProtobuf {

  /// <summary>Holder for reflection information generated from GhostDrawProtobuf.proto</summary>
  public static partial class GhostDrawProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for GhostDrawProtobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GhostDrawProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdHaG9zdERyYXdQcm90b2J1Zi5wcm90bxIRR2hvc3REcmF3UHJvdG9idWYi",
            "ogMKCE1haW5QYWNrEjMKC3JlcXVlc3RDb2RlGAEgASgOMh4uR2hvc3REcmF3",
            "UHJvdG9idWYuUmVxdWVzdENvZGUSMQoKYWN0aW9uQ29kZRgCIAEoDjIdLkdo",
            "b3N0RHJhd1Byb3RvYnVmLkFjdGlvbkNvZGUSMQoKcmV0dXJuQ29kZRgDIAEo",
            "DjIdLkdob3N0RHJhd1Byb3RvYnVmLlJldHVybkNvZGUSNQoMc2VuZE1vZGVD",
            "b2RlGAQgASgOMh8uR2hvc3REcmF3UHJvdG9idWYuU2VuZE1vZGVDb2RlEi8K",
            "CWxvZ2luUGFjaxgFIAEoCzIcLkdob3N0RHJhd1Byb3RvYnVmLkxvZ2luUGFj",
            "axI1Cgx1c2VySW5mb1BhY2sYBiADKAsyHy5HaG9zdERyYXdQcm90b2J1Zi5V",
            "c2VySW5mb1BhY2sSLQoIcm9vbVBhY2sYByADKAsyGy5HaG9zdERyYXdQcm90",
            "b2J1Zi5Sb29tUGFjaxItCghnYW1lUGFjaxgIIAEoCzIbLkdob3N0RHJhd1By",
            "b3RvYnVmLkdhbWVQYWNrIj8KCUxvZ2luUGFjaxIQCghnb29nbGVpZBgBIAEo",
            "CRIQCghuaWNrTmFtZRgCIAEoCRIOCgZpbWdVcmwYAyABKAkiPwoMVXNlcklu",
            "Zm9QYWNrEi8KCWxvZ2luUGFjaxgBIAEoCzIcLkdob3N0RHJhd1Byb3RvYnVm",
            "LkxvZ2luUGFjayJPCghSb29tUGFjaxIvCglyb29tU3RhdGUYASABKA4yHC5H",
            "aG9zdERyYXdQcm90b2J1Zi5Sb29tU3RhdGUSEgoKY3VyclBlb3BsZRgCIAEo",
            "BSLqAQoIR2FtZVBhY2sSOwoIcG9rZXJEaWMYASADKAsyKS5HaG9zdERyYXdQ",
            "cm90b2J1Zi5HYW1lUGFjay5Qb2tlckRpY0VudHJ5EhkKEXNlbGVjdFBvY2tl",
            "ckluZGV4GAIgASgFEhEKCWRyYXdQb2tlchgDIAEoBRIUCgxhY3Rpb25Vc2Vy",
            "SWQYBCABKAkSEAoId2lubmVySWQYBSABKAkaSwoNUG9rZXJEaWNFbnRyeRIL",
            "CgNrZXkYASABKAkSKQoFdmFsdWUYAiABKAsyGi5HaG9zdERyYXdQcm90b2J1",
            "Zi5JbnRMaXN0OgI4ASIZCgdJbnRMaXN0Eg4KBnZhbHVlcxgBIAMoBSo8CgtS",
            "ZXF1ZXN0Q29kZRIPCgtSZXF1ZXN0Tm9uZRAAEggKBFVzZXIQARIICgRSb29t",
            "EAISCAoER2FtZRADKtUBCgpBY3Rpb25Db2RlEg4KCkFjdGlvbk5vbmUQABIJ",
            "CgVMb2dpbhABEgoKBkxvZ291dBACEggKBFBhaXIQAxINCglTdGFydEdhbWUQ",
            "BBIMCghFeGl0Um9vbRAFEgsKB1JlYWR5T0sQBhIQCgxJbml0R2FtZUluZm8Q",
            "BxIOCgpIYW5kUG9rZXJzEAgSCwoHU2h1ZmZsZRAJEg8KC1NlbGVjdFBva2Vy",
            "EAoSDAoIRHJhd0NhcmQQCxIOCgpBY3Rpb25Vc2VyEAwSDgoKR2FtZVJlc3Vs",
            "dBANKlQKClJldHVybkNvZGUSDgoKUmV0dXJuTm9uZRAAEgsKB1N1Y2NlZWQQ",
            "ARIICgRGYWlsEAISDgoKRHVwbGljYXRlZBADEg8KC1dyb25nRm9ybWF0EAQq",
            "LwoMU2VuZE1vZGVDb2RlEgwKCE1vZGVOb25lEAASEQoNUm9vbUJyb2FkY2Fz",
            "dBABKiUKCVJvb21TdGF0ZRIICgRXYWl0EAASDgoKSW5Qcm9ncmVzcxABYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GhostDrawProtobuf.RequestCode), typeof(global::GhostDrawProtobuf.ActionCode), typeof(global::GhostDrawProtobuf.ReturnCode), typeof(global::GhostDrawProtobuf.SendModeCode), typeof(global::GhostDrawProtobuf.RoomState), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GhostDrawProtobuf.MainPack), global::GhostDrawProtobuf.MainPack.Parser, new[]{ "RequestCode", "ActionCode", "ReturnCode", "SendModeCode", "LoginPack", "UserInfoPack", "RoomPack", "GamePack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GhostDrawProtobuf.LoginPack), global::GhostDrawProtobuf.LoginPack.Parser, new[]{ "Googleid", "NickName", "ImgUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GhostDrawProtobuf.UserInfoPack), global::GhostDrawProtobuf.UserInfoPack.Parser, new[]{ "LoginPack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GhostDrawProtobuf.RoomPack), global::GhostDrawProtobuf.RoomPack.Parser, new[]{ "RoomState", "CurrPeople" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GhostDrawProtobuf.GamePack), global::GhostDrawProtobuf.GamePack.Parser, new[]{ "PokerDic", "SelectPockerIndex", "DrawPoker", "ActionUserId", "WinnerId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::GhostDrawProtobuf.IntList), global::GhostDrawProtobuf.IntList.Parser, new[]{ "Values" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    /// <summary>
    ///用戶
    /// </summary>
    [pbr::OriginalName("User")] User = 1,
    /// <summary>
    ///房間
    /// </summary>
    [pbr::OriginalName("Room")] Room = 2,
    /// <summary>
    ///遊戲
    /// </summary>
    [pbr::OriginalName("Game")] Game = 3,
  }

  /// <summary>
  ///執行方法名稱
  /// </summary>
  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    ///登入
    /// </summary>
    [pbr::OriginalName("Login")] Login = 1,
    /// <summary>
    ///登出
    /// </summary>
    [pbr::OriginalName("Logout")] Logout = 2,
    /// <summary>
    ///配對
    /// </summary>
    [pbr::OriginalName("Pair")] Pair = 3,
    /// <summary>
    ///遊戲開始
    /// </summary>
    [pbr::OriginalName("StartGame")] StartGame = 4,
    /// <summary>
    ///離開房間
    /// </summary>
    [pbr::OriginalName("ExitRoom")] ExitRoom = 5,
    /// <summary>
    ///遊戲準備完成
    /// </summary>
    [pbr::OriginalName("ReadyOK")] ReadyOk = 6,
    /// <summary>
    ///遊戲初始訊息(用戶訊息，手牌)
    /// </summary>
    [pbr::OriginalName("InitGameInfo")] InitGameInfo = 7,
    /// <summary>
    ///所有玩家手牌
    /// </summary>
    [pbr::OriginalName("HandPokers")] HandPokers = 8,
    /// <summary>
    ///洗牌
    /// </summary>
    [pbr::OriginalName("Shuffle")] Shuffle = 9,
    /// <summary>
    ///選牌
    /// </summary>
    [pbr::OriginalName("SelectPoker")] SelectPoker = 10,
    /// <summary>
    ///抽牌
    /// </summary>
    [pbr::OriginalName("DrawCard")] DrawCard = 11,
    /// <summary>
    ///行動玩家
    /// </summary>
    [pbr::OriginalName("ActionUser")] ActionUser = 12,
    /// <summary>
    ///遊戲結果
    /// </summary>
    [pbr::OriginalName("GameResult")] GameResult = 13,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("Succeed")] Succeed = 1,
    /// <summary>
    ///失敗
    /// </summary>
    [pbr::OriginalName("Fail")] Fail = 2,
    /// <summary>
    ///重複
    /// </summary>
    [pbr::OriginalName("Duplicated")] Duplicated = 3,
    /// <summary>
    ///格式錯誤
    /// </summary>
    [pbr::OriginalName("WrongFormat")] WrongFormat = 4,
  }

  /// <summary>
  ///發送模式
  /// </summary>
  public enum SendModeCode {
    [pbr::OriginalName("ModeNone")] ModeNone = 0,
    /// <summary>
    ///房間廣播
    /// </summary>
    [pbr::OriginalName("RoomBroadcast")] RoomBroadcast = 1,
  }

  /// <summary>
  ///房間狀態
  /// </summary>
  public enum RoomState {
    /// <summary>
    ///等待
    /// </summary>
    [pbr::OriginalName("Wait")] Wait = 0,
    /// <summary>
    ///進行中
    /// </summary>
    [pbr::OriginalName("InProgress")] InProgress = 1,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GhostDrawProtobuf.GhostDrawProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      sendModeCode_ = other.sendModeCode_;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      userInfoPack_ = other.userInfoPack_.Clone();
      roomPack_ = other.roomPack_.Clone();
      gamePack_ = other.gamePack_ != null ? other.gamePack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "requestCode" field.</summary>
    public const int RequestCodeFieldNumber = 1;
    private global::GhostDrawProtobuf.RequestCode requestCode_ = global::GhostDrawProtobuf.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GhostDrawProtobuf.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "actionCode" field.</summary>
    public const int ActionCodeFieldNumber = 2;
    private global::GhostDrawProtobuf.ActionCode actionCode_ = global::GhostDrawProtobuf.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GhostDrawProtobuf.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "returnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 3;
    private global::GhostDrawProtobuf.ReturnCode returnCode_ = global::GhostDrawProtobuf.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GhostDrawProtobuf.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "sendModeCode" field.</summary>
    public const int SendModeCodeFieldNumber = 4;
    private global::GhostDrawProtobuf.SendModeCode sendModeCode_ = global::GhostDrawProtobuf.SendModeCode.ModeNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GhostDrawProtobuf.SendModeCode SendModeCode {
      get { return sendModeCode_; }
      set {
        sendModeCode_ = value;
      }
    }

    /// <summary>Field number for the "loginPack" field.</summary>
    public const int LoginPackFieldNumber = 5;
    private global::GhostDrawProtobuf.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GhostDrawProtobuf.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "userInfoPack" field.</summary>
    public const int UserInfoPackFieldNumber = 6;
    private static readonly pb::FieldCodec<global::GhostDrawProtobuf.UserInfoPack> _repeated_userInfoPack_codec
        = pb::FieldCodec.ForMessage(50, global::GhostDrawProtobuf.UserInfoPack.Parser);
    private readonly pbc::RepeatedField<global::GhostDrawProtobuf.UserInfoPack> userInfoPack_ = new pbc::RepeatedField<global::GhostDrawProtobuf.UserInfoPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GhostDrawProtobuf.UserInfoPack> UserInfoPack {
      get { return userInfoPack_; }
    }

    /// <summary>Field number for the "roomPack" field.</summary>
    public const int RoomPackFieldNumber = 7;
    private static readonly pb::FieldCodec<global::GhostDrawProtobuf.RoomPack> _repeated_roomPack_codec
        = pb::FieldCodec.ForMessage(58, global::GhostDrawProtobuf.RoomPack.Parser);
    private readonly pbc::RepeatedField<global::GhostDrawProtobuf.RoomPack> roomPack_ = new pbc::RepeatedField<global::GhostDrawProtobuf.RoomPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GhostDrawProtobuf.RoomPack> RoomPack {
      get { return roomPack_; }
    }

    /// <summary>Field number for the "gamePack" field.</summary>
    public const int GamePackFieldNumber = 8;
    private global::GhostDrawProtobuf.GamePack gamePack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GhostDrawProtobuf.GamePack GamePack {
      get { return gamePack_; }
      set {
        gamePack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (SendModeCode != other.SendModeCode) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if(!userInfoPack_.Equals(other.userInfoPack_)) return false;
      if(!roomPack_.Equals(other.roomPack_)) return false;
      if (!object.Equals(GamePack, other.GamePack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestCode != global::GhostDrawProtobuf.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::GhostDrawProtobuf.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::GhostDrawProtobuf.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (SendModeCode != global::GhostDrawProtobuf.SendModeCode.ModeNone) hash ^= SendModeCode.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      hash ^= userInfoPack_.GetHashCode();
      hash ^= roomPack_.GetHashCode();
      if (gamePack_ != null) hash ^= GamePack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestCode != global::GhostDrawProtobuf.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::GhostDrawProtobuf.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::GhostDrawProtobuf.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReturnCode);
      }
      if (SendModeCode != global::GhostDrawProtobuf.SendModeCode.ModeNone) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SendModeCode);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LoginPack);
      }
      userInfoPack_.WriteTo(output, _repeated_userInfoPack_codec);
      roomPack_.WriteTo(output, _repeated_roomPack_codec);
      if (gamePack_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(GamePack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestCode != global::GhostDrawProtobuf.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::GhostDrawProtobuf.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::GhostDrawProtobuf.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (SendModeCode != global::GhostDrawProtobuf.SendModeCode.ModeNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SendModeCode);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      size += userInfoPack_.CalculateSize(_repeated_userInfoPack_codec);
      size += roomPack_.CalculateSize(_repeated_roomPack_codec);
      if (gamePack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GamePack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.RequestCode != global::GhostDrawProtobuf.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::GhostDrawProtobuf.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::GhostDrawProtobuf.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.SendModeCode != global::GhostDrawProtobuf.SendModeCode.ModeNone) {
        SendModeCode = other.SendModeCode;
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::GhostDrawProtobuf.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      userInfoPack_.Add(other.userInfoPack_);
      roomPack_.Add(other.roomPack_);
      if (other.gamePack_ != null) {
        if (gamePack_ == null) {
          GamePack = new global::GhostDrawProtobuf.GamePack();
        }
        GamePack.MergeFrom(other.GamePack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestCode = (global::GhostDrawProtobuf.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            ActionCode = (global::GhostDrawProtobuf.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            ReturnCode = (global::GhostDrawProtobuf.ReturnCode) input.ReadEnum();
            break;
          }
          case 32: {
            SendModeCode = (global::GhostDrawProtobuf.SendModeCode) input.ReadEnum();
            break;
          }
          case 42: {
            if (loginPack_ == null) {
              LoginPack = new global::GhostDrawProtobuf.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 50: {
            userInfoPack_.AddEntriesFrom(input, _repeated_userInfoPack_codec);
            break;
          }
          case 58: {
            roomPack_.AddEntriesFrom(input, _repeated_roomPack_codec);
            break;
          }
          case 66: {
            if (gamePack_ == null) {
              GamePack = new global::GhostDrawProtobuf.GamePack();
            }
            input.ReadMessage(GamePack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///註冊/登入包
  /// </summary>
  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GhostDrawProtobuf.GhostDrawProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      googleid_ = other.googleid_;
      nickName_ = other.nickName_;
      imgUrl_ = other.imgUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "googleid" field.</summary>
    public const int GoogleidFieldNumber = 1;
    private string googleid_ = "";
    /// <summary>
    ///Google帳號ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Googleid {
      get { return googleid_; }
      set {
        googleid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    /// <summary>
    ///暱稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imgUrl" field.</summary>
    public const int ImgUrlFieldNumber = 3;
    private string imgUrl_ = "";
    /// <summary>
    ///頭像Url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImgUrl {
      get { return imgUrl_; }
      set {
        imgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Googleid != other.Googleid) return false;
      if (NickName != other.NickName) return false;
      if (ImgUrl != other.ImgUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Googleid.Length != 0) hash ^= Googleid.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (ImgUrl.Length != 0) hash ^= ImgUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Googleid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Googleid);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (ImgUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImgUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Googleid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Googleid);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (ImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImgUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Googleid.Length != 0) {
        Googleid = other.Googleid;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.ImgUrl.Length != 0) {
        ImgUrl = other.ImgUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Googleid = input.ReadString();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 26: {
            ImgUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用戶訊息包
  /// </summary>
  public sealed partial class UserInfoPack : pb::IMessage<UserInfoPack> {
    private static readonly pb::MessageParser<UserInfoPack> _parser = new pb::MessageParser<UserInfoPack>(() => new UserInfoPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GhostDrawProtobuf.GhostDrawProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack(UserInfoPack other) : this() {
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack Clone() {
      return new UserInfoPack(this);
    }

    /// <summary>Field number for the "loginPack" field.</summary>
    public const int LoginPackFieldNumber = 1;
    private global::GhostDrawProtobuf.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GhostDrawProtobuf.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (loginPack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LoginPack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoPack other) {
      if (other == null) {
        return;
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::GhostDrawProtobuf.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (loginPack_ == null) {
              LoginPack = new global::GhostDrawProtobuf.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房間包
  /// </summary>
  public sealed partial class RoomPack : pb::IMessage<RoomPack> {
    private static readonly pb::MessageParser<RoomPack> _parser = new pb::MessageParser<RoomPack>(() => new RoomPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GhostDrawProtobuf.GhostDrawProtobufReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack(RoomPack other) : this() {
      roomState_ = other.roomState_;
      currPeople_ = other.currPeople_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack Clone() {
      return new RoomPack(this);
    }

    /// <summary>Field number for the "roomState" field.</summary>
    public const int RoomStateFieldNumber = 1;
    private global::GhostDrawProtobuf.RoomState roomState_ = global::GhostDrawProtobuf.RoomState.Wait;
    /// <summary>
    ///房間狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GhostDrawProtobuf.RoomState RoomState {
      get { return roomState_; }
      set {
        roomState_ = value;
      }
    }

    /// <summary>Field number for the "currPeople" field.</summary>
    public const int CurrPeopleFieldNumber = 2;
    private int currPeople_;
    /// <summary>
    ///房間人數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrPeople {
      get { return currPeople_; }
      set {
        currPeople_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomState != other.RoomState) return false;
      if (CurrPeople != other.CurrPeople) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomState != global::GhostDrawProtobuf.RoomState.Wait) hash ^= RoomState.GetHashCode();
      if (CurrPeople != 0) hash ^= CurrPeople.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomState != global::GhostDrawProtobuf.RoomState.Wait) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomState);
      }
      if (CurrPeople != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrPeople);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomState != global::GhostDrawProtobuf.RoomState.Wait) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomState);
      }
      if (CurrPeople != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrPeople);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPack other) {
      if (other == null) {
        return;
      }
      if (other.RoomState != global::GhostDrawProtobuf.RoomState.Wait) {
        RoomState = other.RoomState;
      }
      if (other.CurrPeople != 0) {
        CurrPeople = other.CurrPeople;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomState = (global::GhostDrawProtobuf.RoomState) input.ReadEnum();
            break;
          }
          case 16: {
            CurrPeople = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///遊戲內容包
  /// </summary>
  public sealed partial class GamePack : pb::IMessage<GamePack> {
    private static readonly pb::MessageParser<GamePack> _parser = new pb::MessageParser<GamePack>(() => new GamePack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamePack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GhostDrawProtobuf.GhostDrawProtobufReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePack(GamePack other) : this() {
      pokerDic_ = other.pokerDic_.Clone();
      selectPockerIndex_ = other.selectPockerIndex_;
      drawPoker_ = other.drawPoker_;
      actionUserId_ = other.actionUserId_;
      winnerId_ = other.winnerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePack Clone() {
      return new GamePack(this);
    }

    /// <summary>Field number for the "pokerDic" field.</summary>
    public const int PokerDicFieldNumber = 1;
    private static readonly pbc::MapField<string, global::GhostDrawProtobuf.IntList>.Codec _map_pokerDic_codec
        = new pbc::MapField<string, global::GhostDrawProtobuf.IntList>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::GhostDrawProtobuf.IntList.Parser), 10);
    private readonly pbc::MapField<string, global::GhostDrawProtobuf.IntList> pokerDic_ = new pbc::MapField<string, global::GhostDrawProtobuf.IntList>();
    /// <summary>
    ///所有玩家手牌(id, 手牌)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::GhostDrawProtobuf.IntList> PokerDic {
      get { return pokerDic_; }
    }

    /// <summary>Field number for the "selectPockerIndex" field.</summary>
    public const int SelectPockerIndexFieldNumber = 2;
    private int selectPockerIndex_;
    /// <summary>
    ///對手選擇的撲克
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectPockerIndex {
      get { return selectPockerIndex_; }
      set {
        selectPockerIndex_ = value;
      }
    }

    /// <summary>Field number for the "drawPoker" field.</summary>
    public const int DrawPokerFieldNumber = 3;
    private int drawPoker_;
    /// <summary>
    ///抽中的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawPoker {
      get { return drawPoker_; }
      set {
        drawPoker_ = value;
      }
    }

    /// <summary>Field number for the "actionUserId" field.</summary>
    public const int ActionUserIdFieldNumber = 4;
    private string actionUserId_ = "";
    /// <summary>
    ///行動玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionUserId {
      get { return actionUserId_; }
      set {
        actionUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winnerId" field.</summary>
    public const int WinnerIdFieldNumber = 5;
    private string winnerId_ = "";
    /// <summary>
    ///贏家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamePack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamePack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PokerDic.Equals(other.PokerDic)) return false;
      if (SelectPockerIndex != other.SelectPockerIndex) return false;
      if (DrawPoker != other.DrawPoker) return false;
      if (ActionUserId != other.ActionUserId) return false;
      if (WinnerId != other.WinnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PokerDic.GetHashCode();
      if (SelectPockerIndex != 0) hash ^= SelectPockerIndex.GetHashCode();
      if (DrawPoker != 0) hash ^= DrawPoker.GetHashCode();
      if (ActionUserId.Length != 0) hash ^= ActionUserId.GetHashCode();
      if (WinnerId.Length != 0) hash ^= WinnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pokerDic_.WriteTo(output, _map_pokerDic_codec);
      if (SelectPockerIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SelectPockerIndex);
      }
      if (DrawPoker != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DrawPoker);
      }
      if (ActionUserId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ActionUserId);
      }
      if (WinnerId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WinnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pokerDic_.CalculateSize(_map_pokerDic_codec);
      if (SelectPockerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectPockerIndex);
      }
      if (DrawPoker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawPoker);
      }
      if (ActionUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionUserId);
      }
      if (WinnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamePack other) {
      if (other == null) {
        return;
      }
      pokerDic_.Add(other.pokerDic_);
      if (other.SelectPockerIndex != 0) {
        SelectPockerIndex = other.SelectPockerIndex;
      }
      if (other.DrawPoker != 0) {
        DrawPoker = other.DrawPoker;
      }
      if (other.ActionUserId.Length != 0) {
        ActionUserId = other.ActionUserId;
      }
      if (other.WinnerId.Length != 0) {
        WinnerId = other.WinnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pokerDic_.AddEntriesFrom(input, _map_pokerDic_codec);
            break;
          }
          case 16: {
            SelectPockerIndex = input.ReadInt32();
            break;
          }
          case 24: {
            DrawPoker = input.ReadInt32();
            break;
          }
          case 34: {
            ActionUserId = input.ReadString();
            break;
          }
          case 42: {
            WinnerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工具類
  /// </summary>
  public sealed partial class IntList : pb::IMessage<IntList> {
    private static readonly pb::MessageParser<IntList> _parser = new pb::MessageParser<IntList>(() => new IntList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GhostDrawProtobuf.GhostDrawProtobufReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList(IntList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList Clone() {
      return new IntList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_values_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> values_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
